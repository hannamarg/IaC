# This is a basic workflow to help you get started with Actions

name: web

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    paths:
      - 'uke 39**'

  workflow_dispatch:



    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      WORKING_DIR: "./uke 39"
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    jobs:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      dev_stage:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # Runs a single command using the runners shell
      - name: 'Terraform init'
        id: init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}        
        
      - name: 'Terraform workspace select or create dev'
        id: workspace
        run: terraform workspace select dev || terraform workspace new dev
        working-directory: ${{ env.WORKING_DIR }}  

      - name: 'terraform apply dev'
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}  

      - name: 'Terraform plan'
        id: plan
        run: terraform plan
        working-directory: ${{ env.WORKING_DIR }} 
                    
      - name: 'Check last commit message'
        id: commit
        run: echo "::set-output name=message::$(git log --format=%B -n 1)"
      - name: 'Conditionally run Terraform action'
        run: |
          if [[ "${{ steps.commit.outputs.message }}" == *"destroy"* ]]; then
            terraform destroy -auto-approve
          else
            terraform apply -auto-approve
          fi
        working-directory: ${{ env.WORKING_DIR }} 

      stage_prod:
      needs: dev_stage
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4.1.1
      
        - name: Terraform init
          run: terraform init
          working-directory: ${{ env.WORKING_DIR }}
        
        - name: Terraform workspace select or create stage
          run: terraform workspace select stage || terraform workspace new stage
          working-directory: ${{ env.WORKING_DIR }}
      
        - name: Terraform apply stage
          run: terraform apply -auto-approve
          working-directory: ${{ env.WORKING_DIR }}


        prod:
        needs: stage_prod
        runs-on: ubuntu-latest
        environment: 
          name: prod
          steps:
          - name: Checkout
            uses: actions/checkout@v4.1.1
      
          - name: Terraform init
            run: terraform init
            working-directory: ${{ env.WORKING_DIR }}
        
          - name: Terraform workspace select or create prod
            run: terraform workspace select prod || terraform workspace new prod
            working-directory: ${{ env.WORKING_DIR }}
      
          - name: Terraform apply prod
            run: terraform apply -auto-approve
            working-directory: ${{ env.WORKING_DIR }}
